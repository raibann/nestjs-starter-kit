// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  log      = ["query", "info", "warn", "error"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// User Table
// ==========================
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  username     String? @unique
  password     String
  status       Int     @default(1) // 1: active, 0: inactive
  isSuperAdmin Boolean @default(false)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions      Session[]
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]
  userRole      UserRole[]
}

// ==========================
// Session Table
// ==========================
model Session {
  id        String   @id @default(cuid())
  userId    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken RefreshToken[]
}

// ==========================
// Refresh Token Table
// ==========================
model RefreshToken {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String?
  token        String   @unique // Store hashed version in production
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  revoked      Boolean  @default(false)
  replacedById String? // For token rotation tracking

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

// ==========================
// Audit Log Table
// ==========================
model AuditLog {
  id     String @id @default(cuid())
  userId String
  action String
  data   Json?  @db.JsonB

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ==========================
// User Role Table
// ==========================
model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

// ========================== 
// Role Table
// ==========================
model Role {
  id             String           @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission RolePermission[]
  userRole       UserRole[]
}

// ==========================
// Role Permission Table
// ==========================
model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

// ==========================
// Permission Table
// ==========================
model Permission {
  id             String           @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission RolePermission[]
}
